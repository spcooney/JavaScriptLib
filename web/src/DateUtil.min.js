var version = "1.0.0.0", DateUtil = function () { return new DateUtil.Core.init }; DateUtil.Core = DateUtil.prototype = { Version: version, Constructor: DateUtil, Clone: function (e) { var t = arguments.callee; if (1 === arguments.length) return t.prototype = e, new t }, CreateAspWcfDate: function (e) { var t = new Date(e); return isNaN(t) ? e : "/Date(" + t.getTime() + "-0000)/" }, CreateDateFromTime: function (e) { if (void 0 === e || null === e || e.length <= 0) return ""; var t = e.split(":"); if (void 0 === t || null === e || t.length < 2) return ""; var n = t[0], r = t[1], a = new Date; return a.setHours(n), a.setMinutes(r), a.setSeconds(0), a }, CreateDateNoTime: function () { var e = new Date; return e.setDate(e.getDate()), e.setHours(0, 0), e }, CreateDateTimestamp: function () { var e = new Date; return "_" + (e.getMonth() + 1) + "_" + e.getDate() + "_" + e.getFullYear() }, GetQuarterStr: function (e, t) { var n = new Date(e), r = n.getMonth(), a = ""; return a = r >= 4 && r <= 6 ? "Q2" : r >= 7 && r <= 9 ? "Q3" : r >= 10 && r <= 12 ? "Q4" : "Q1", t && (a += " " + n.getFullYear()), a }, IsDate: function (e) { return "[object Date]" === Object.prototype.toString.apply(e) }, IsValidDate: function (e) { return "[object Date]" === Object.prototype.toString.call(e) && !isNaN(e.getTime()) }, OffsetUtcDateToLocalDate: function (e) { var t = new Date(e.getTime() + 60 * e.getTimezoneOffset() * 1e3), n = e.getTimezoneOffset() / 60, r = e.getHours(); return t.setHours(r - n), t }, Ticks: function (e) { return 1e4 * new Date(e).getTime() + 621355968e9 } };