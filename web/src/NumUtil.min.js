var version = "1.0.0.0", NumUtil = function () { return new NumUtil.Core.init }; NumUtil.Core = NumUtil.prototype = { Version: version, Constructor: NumUtil, Clone: function (r) { var t = arguments.callee; if (1 === arguments.length) return t.prototype = r, new t }, CalcPercentChangeFrom: function (r, t, e) { if (isNaN(r) || isNaN(t)) return 0; if (0 === r || 0 === t) return 0; var i = (10 * t - 10 * r) / 10; return (null === e || e <= 0) && (e = 2), NumUtil.Core.ParseFloatNoZerosWithCommas(i.toPrecision(e) / Math.abs(r.toPrecision(e)) * 100, e) }, NumberWithCommas: function (r) { var t = r.toString().split("."); return t[0] = t[0].replace(/,/g, ""), t[0] = t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), t.join(".") }, NumberWithoutCommas: function (r) { var t = r.toString().split("."); return t[0] = t[0].replace(/,/g, ""), t.join(".") }, ParseFloatNoZeros: function (r, t) { if (isNaN(r)) return r; var e = parseFloat(r).toFixed(t).replace(/^0+|0+$/g, StrUtil.Core.EmptyString); if (isNaN(e) || void 0 === e || null === e || e.length <= 0) return r; var i = e; return "." === e.charAt(e.length - 1) && (i = e.substring(0, e.length - 1)), "." === i.charAt(0) ? "0" + i : i }, ParseFloatNoZerosWithoutCommas: function (r, t) { if (StrUtil.Core.IsNullOrEmpty(r)) return r; if (r.indexOf(",") >= 0 && (r = r.replace(/,/g, StrUtil.Core.EmptyString)), isNaN(r)) return r; var e = parseFloat(r).toFixed(t).replace(/^0+|0+$/g, StrUtil.Core.EmptyString); if (isNaN(e) || StrUtil.Core.IsNullOrEmpty(e)) return r; var i = e; return "." === e.charAt(e.length - 1) && (i = e.substring(0, e.length - 1)), "." === i.charAt(0) ? "0" + i : i }, ParseFloatNoZerosWithCommas: function (r, t) { return NumUtil.Core.NumberWithCommas(NumUtil.Core.ParseFloatNoZeros(r, t)) }, ParseFloatWithCommas: function (r) { var t = r.toString().split("."); return t[0] = t[0].replace(/,/g, StrUtil.Core.EmptyString), t[0] = t[0].replace(/\B(?=(\d{3})+(?!\d))/g, ","), t.join(".") }, ParseFloatWithoutCommas: function (r) { var t = r.toString().split("."); return t[0] = t[0].replace(/,/g, StrUtil.Core.EmptyString), t.join(".") }, ParseIntWithDefault: function (r, t) { var e = parseInt(r); if (isNaN(e)) { var i = parseInt(t); return isNaN(i) ? t : i } } };