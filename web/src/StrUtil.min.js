var version = "1.0.0.0", StrUtil = function () { return new StrUtil.Core.init }; StrUtil.Core = StrUtil.prototype = { Version: version, Constructor: StrUtil, Clone: function (t) { var r = arguments.callee; if (1 === arguments.length) return r.prototype = t, new r }, EmptyString: "", EncodeBase64: function (t) { var r, n, e, i = [], l = [], u = 0, o = t.length; do { r = t[u++], n = t[u++], e = t[u++], l[0] = r >> 2, l[1] = (3 & r) << 4 | n >> 4, l[2] = (15 & n) << 2 | e >> 6, l[3] = 63 & e, isNaN(n) ? l[2] = l[3] = 64 : isNaN(e) && (l[3] = 64); for (var g = 0; g < 4; g++)i.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(l[g])) } while (u < o); return i.join(Helper.EmptyString) }, GetType: function (t) { return Object.prototype.toString.apply(t) }, InsertString: function (t, r, n) { return r > 0 ? t.substring(0, r) + n + t.substring(r, t.length) : n + t }, IsString: function (t) { return "[object String]" === StrUtil.Core.GetType("String", t) }, IsNullOrEmpty: function (t) { return StrUtil.Core.IsNull(t) || t === StrUtil.Core.EmptyString }, IsNotNullOrEmpty: function (t) { return !StrUtil.Core.IsNullOrEmpty(t) }, IsNull: function (t) { return void 0 === t || null === t || t.length <= 0 }, IsNotNull: function (t) { return !(void 0 === t || null === t || t.length <= 0) }, Left: function (t, r) { return r <= 0 ? StrUtil.Core.EmptyString : r > String(t).length ? t : String(t).substring(0, r) }, ReplaceAll: function (t, r, n) { return t.replace(new RegExp(r, "g"), n) }, RemoveSingleQuotes: function (t) { return StrUtil.Core.IsNullOrEmpty(t) ? t : ("'" === t.charAt(0) && (t = t.substr(1, t.length - 1)), "'" === t.charAt(t.length - 1) && (t = t.substr(0, t.length - 1)), t) }, Right: function (t, r) { if (r <= 0) return StrUtil.Core.EmptyString; if (r > String(t).length) return t; var n = String(t).length; return String(t).substring(n, Math.abs(n - r)) } };